security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    App\Entity\User:
      algorithm: 'argon2id'
      memory_cost: 65536
      time_cost: 4
      threads: 3

  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\User
        property: username

    app_telegram_provider:
      entity:
        class: App\Entity\User
        property: telegramId

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    # Telegram webhook endpoint - no authentication needed
    telegram_webhook:
      pattern: ^/telegram/webhook
      stateless: true
      security: false

    # API endpoints with JWT/Telegram authentication
    api:
      pattern: ^/api
      stateless: true
      provider: app_user_provider
      custom_authenticators:
        - App\Security\TelegramAuthenticator
        - lexik_jwt_authentication.jwt_authenticator
      entry_point: App\Security\TelegramAuthenticator
      refresh_jwt:
        check_path: /api/token/refresh

    # Admin area with form login and 2FA
    admin:
      pattern: ^/admin
      lazy: true
      provider: app_user_provider
      form_login:
        login_path: admin_login
        check_path: admin_login
        default_target_path: admin_dashboard
        always_use_default_target_path: false
        enable_csrf: true
        username_parameter: email
        password_parameter: password
      logout:
        path: admin_logout
        target: admin_login
      remember_me:
        secret: '%kernel.secret%'
        lifetime: 604800 # 1 week
        path: /admin
        secure: true
        httponly: true
        samesite: strict
        name: ADMIN_REMEMBERME
      two_factor:
        auth_form_path: 2fa_login
        check_path: 2fa_login_check

    # Main application firewall
    main:
      lazy: true
      provider: app_user_provider
      form_login:
        login_path: app_login
        check_path: app_login
        enable_csrf: true
      logout:
        path: app_logout
        # where to redirect after logout
        # target: app_any_route
      remember_me:
        secret: '%kernel.secret%'
        lifetime: 604800
        path: /
        secure: true
        httponly: true
        samesite: lax

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Role hierarchy
  role_hierarchy:
    ROLE_USER: [ ]
    ROLE_VERIFIED: [ ROLE_USER ]
    ROLE_VIP: [ ROLE_VERIFIED ]
    ROLE_SUPPORT: [ ROLE_USER ]
    ROLE_MODERATOR: [ ROLE_SUPPORT ]
    ROLE_ADMIN: [ ROLE_MODERATOR, ROLE_ALLOWED_TO_SWITCH ]
    ROLE_SUPER_ADMIN: [ ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH ]

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    # Public areas
    - { path: ^/telegram/webhook, roles: PUBLIC_ACCESS }
    - { path: ^/api/health, roles: PUBLIC_ACCESS }
    - { path: ^/api/auth/telegram, roles: PUBLIC_ACCESS }

    # Admin area
    - { path: ^/admin/login, roles: PUBLIC_ACCESS }
    - { path: ^/admin/logout, roles: PUBLIC_ACCESS }
    - { path: ^/admin/2fa, roles: IS_AUTHENTICATED_2FA_IN_PROGRESS }
    - { path: ^/admin, roles: ROLE_ADMIN }

    # API endpoints
    - { path: ^/api/token/refresh, roles: PUBLIC_ACCESS }
    - { path: ^/api/admin, roles: ROLE_ADMIN }
    - { path: ^/api, roles: ROLE_USER }

    # User area
    - { path: ^/login, roles: PUBLIC_ACCESS }
    - { path: ^/register, roles: PUBLIC_ACCESS }
    - { path: ^/reset-password, roles: PUBLIC_ACCESS }
    - { path: ^/, roles: ROLE_USER }

  # Security voters for fine-grained permissions
  access_decision_manager:
    strategy: unanimous
    allow_if_all_abstain: false

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon