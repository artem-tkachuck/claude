x-logging: &prod-logging
  driver: "json-file"
  options:
    max-size: "100m"
    max-file: "10"
    compress: "true"

services:
  nginx:
    image: nginx:1.25-alpine
    container_name: crypto_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./public:/var/www/public:ro
      - ./.docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./.docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./var/certbot:/var/www/certbot:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - php
    networks:
      - crypto_network
    logging: *prod-logging
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  php:
    build:
      context: ./.docker/php
      dockerfile: Dockerfile
    container_name: crypto_php
    restart: always
    environment:
      APP_ENV: prod
      APP_DEBUG: 0
      DATABASE_URL: "mysql://crypto_app:${DB_PASSWORD}@mysql:3306/crypto_investment?serverVersion=8.0"
      REDIS_URL: "redis://redis:6379"
    volumes:
      - ./:/var/www
      - php_logs:/var/log/php
      - php_sessions:/var/www/var/sessions
      - ./var/cache:/var/www/var/cache
    depends_on:
      - mysql
      - redis
    networks:
      - crypto_network
    logging: *prod-logging
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G

  mysql:
    image: mysql:8.0
    container_name: crypto_mysql
    restart: always
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --max_connections=200
      --innodb_buffer_pool_size=1G
      --innodb_log_file_size=256M
      --slow_query_log=1
      --long_query_time=2
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: crypto_investment
      MYSQL_USER: crypto_app
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./.docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - mysql_logs:/var/log/mysql
    networks:
      - crypto_network
    logging: *prod-logging
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  redis:
    image: redis:7-alpine
    container_name: crypto_redis
    restart: always
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    networks:
      - crypto_network
    logging: *prod-logging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: crypto_rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: crypto
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "15672:15672"
    networks:
      - crypto_network
    logging: *prod-logging
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  certbot:
    image: certbot/certbot
    container_name: crypto_certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - ./var/certbot:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - crypto_network
    logging: *prod-logging

  backup:
    image: mysql:8.0
    container_name: crypto_backup
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: root
      MYSQL_PASSWORD: ${DB_ROOT_PASSWORD}
    volumes:
      - ./backups:/backups
    command: >
      sh -c "while true; do
        mysqldump -h mysql -u root -p${DB_ROOT_PASSWORD} crypto_investment | gzip > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql.gz
        find /backups -name 'backup_*.sql.gz' -mtime +7 -delete
        sleep 86400
      done"
    depends_on:
      - mysql
    networks:
      - crypto_network
    logging: *prod-logging

networks:
  crypto_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  php_logs:
    driver: local
  php_sessions:
    driver: local
  nginx_logs:
    driver: local
  mysql_logs:
    driver: local